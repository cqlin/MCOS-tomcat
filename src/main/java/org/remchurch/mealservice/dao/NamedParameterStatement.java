package org.remchurch.mealservice.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
//import java.sql.Timestamp;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class NamedParameterStatement implements AutoCloseable {
	/** The statement this object is wrapping. */
	private final PreparedStatement statement;

	/** Maps parameter names to arrays of ints which are the parameter indices. 
	 */
	private final Map<String, List<Integer>> indexMap;


	/**
	 * Creates a NamedParameterStatement.  Wraps a call to
	 * c.{@link Connection#prepareStatement(java.lang.String) prepareStatement}.
	 * @param connection the database connection
	 * @param query      the parameterized query
	 * @throws SQLException if the statement could not be created
	 */
	public NamedParameterStatement(Connection connection, String query) throws SQLException {
		indexMap=new HashMap<>();
		String parsedQuery=parse(query, indexMap);
		statement=connection.prepareStatement(parsedQuery);
	}

	/**
	 * Creates a NamedParameterStatement.  Wraps a call to
	 * c.{@link Connection#prepareStatement(java.lang.String) prepareStatement}.
	 * @param connection
	 * @param query
	 * @param autoGeneratedKeys - use Statement.RETURN_GENERATED_KEYS to return generated key
	 * @throws SQLException
	 */
	public NamedParameterStatement(Connection connection, String query, int autoGeneratedKeys) throws SQLException {
		indexMap=new HashMap<>();
		String parsedQuery=parse(query, indexMap);
		statement=connection.prepareStatement(parsedQuery, autoGeneratedKeys);
	}

	/**
	 * Creates a NamedParameterStatement.  Wraps a call to
	 * c.{@link Connection#prepareStatement(java.lang.String) prepareStatement}.
	 * @param connection
	 * @param query
	 * @param returnColumns - use new String[] { "id" } to return generated key, 
	 *      it only allows one column, and can only be retrieved with GENERATED_KEYS name in ResultSet
	 * @throws SQLException
	 */
	public NamedParameterStatement(Connection connection, String query, String[] returnColumns) throws SQLException {
		indexMap=new HashMap<>();
		String parsedQuery=parse(query, indexMap);
		statement=connection.prepareStatement(parsedQuery, returnColumns);
	}


	/**
	 * Parses a query with named parameters.  The parameter-index mappings are 
put into the map, and the
	 * parsed query is returned.  DO NOT CALL FROM CLIENT CODE.  This 
method is non-private so JUnit code can
	 * test it.
	 * @param query    query to parse
	 * @param paramMap map to hold parameter-index mappings
	 * @return the parsed query
	 */
	static final String parse(String query, Map<String, List<Integer>> paramMap) {
		// I was originally using regular expressions, but they didn't work well for ignoring
		// parameter-like strings inside quotes.
		int length=query.length();
		StringBuilder parsedQuery=new StringBuilder(length);
		boolean inSingleQuote=false;
		boolean inDoubleQuote=false;
		int index=1;

		for(int i=0;i<length;i++) {
			char c=query.charAt(i);
			if(inSingleQuote) {
				if(c=='\'') {
					inSingleQuote=false;
				}
			} else if(inDoubleQuote) {
				if(c=='"') {
					inDoubleQuote=false;
				}
			} else {
				if(c=='\'') {
					inSingleQuote=true;
				} else if(c=='"') {
					inDoubleQuote=true;
				} else if(c==':' && i+1<length &&
						Character.isJavaIdentifierStart(query.charAt(i+1))) {
					int j=i+2;
					while(j<length && Character.isJavaIdentifierPart(query.charAt(j))) {
						j++;
					}
					String name=query.substring(i+1,j);
					c='?'; // replace the parameter with a question mark
					i+=name.length(); // skip past the end if the parameter

					paramMap.computeIfAbsent(name, k->new LinkedList<>()).add(index);;

					index++;
				}
			}
			parsedQuery.append(c);
		}

		return parsedQuery.toString();
	}


	/**
	 * Sets a parameter.
	 * @param name  parameter name
	 * @param value parameter value
	 * @throws SQLException if an error occurred
	 * @throws IllegalArgumentException if the parameter does not exist
	 * @see PreparedStatement#setObject(int, java.lang.Object)
	 */
	public void setObject(String name, Object value) throws SQLException {
		List<Integer> indexes = indexMap.get(name);
		if(indexes!=null)
			for(int i:indexes) {
				statement.setObject(i, value);
			}
	}


	/**
	 * Sets a parameter.
	 * @param name  parameter name
	 * @param value parameter value
	 * @throws SQLException if an error occurred
	 * @throws IllegalArgumentException if the parameter does not exist
	 * @see PreparedStatement#setString(int, java.lang.String)
	 */
	public void setString(String name, String value) throws SQLException {
		List<Integer> indexes = indexMap.get(name);
		for(int i:indexes) {
			statement.setString(i, value);
		}
	}


	/**
	 * Sets a parameter.
	 * @param name  parameter name
	 * @param value parameter value
	 * @throws SQLException if an error occurred
	 * @throws IllegalArgumentException if the parameter does not exist
	 * @see PreparedStatement#setInt(int, int)
	 */
	public void setInt(String name, int value) throws SQLException {
		List<Integer> indexes = indexMap.get(name);
		for(int i:indexes) {
			statement.setInt(i, value);
		}
	}


	/**
	 * Sets a parameter.
	 * @param name  parameter name
	 * @param value parameter value
	 * @throws SQLException if an error occurred
	 * @throws IllegalArgumentException if the parameter does not exist
	 * @see PreparedStatement#setInt(int, int)
	 */
	public void setLong(String name, long value) throws SQLException {
		List<Integer> indexes = indexMap.get(name);
		for(int i:indexes) {
			statement.setLong(i, value);
		}
	}


	/**
	 * Sets a parameter.
	 * @param name  parameter name
	 * @param value parameter value
	 * @throws SQLException if an error occurred
	 * @throws IllegalArgumentException if the parameter does not exist
	 * @see PreparedStatement#setTimestamp(int, java.sql.Timestamp)
	public void setTimestamp(String name, Timestamp value) throws SQLException 
	{
		List<Integer> indexes = indexMap.get(name);
		for(int i:indexes) {
			statement.setTimestamp(i, value);
		}
	}
	 */


	/**
	 * Returns the underlying statement.
	 * @return the statement
	 */
	public PreparedStatement getStatement() {
		return statement;
	}


	/**
	 * Executes the statement.
	 * @return true if the first result is a {@link ResultSet}
	 * @throws SQLException if an error occurred
	 * @see PreparedStatement#execute()
	 */
	public boolean execute() throws SQLException {
		return statement.execute();
	}


	/**
	 * Executes the statement, which must be a query.
	 * @return the query results
	 * @throws SQLException if an error occurred
	 * @see PreparedStatement#executeQuery()
	 */
	public ResultSet executeQuery() throws SQLException {
		return statement.executeQuery();
	}


	/**
	 * Executes the statement, which must be an SQL INSERT, UPDATE or DELETE 
statement;
	 * or an SQL statement that returns nothing, such as a DDL statement.
	 * @return number of rows affected
	 * @throws SQLException if an error occurred
	 * @see PreparedStatement#executeUpdate()
	 */
	public int executeUpdate() throws SQLException {
		return statement.executeUpdate();
	}

	/**
	 * Retrieves any auto-generated keys created as a result of executing this Statement object.
	 * 
	 * @return
	 * @throws SQLException
	 */
	public ResultSet getGeneratedKeys() throws SQLException {
		return statement.getGeneratedKeys();
	}


	/**
	 * Closes the statement.
	 * @throws SQLException if an error occurred
	 * @see Statement#close()
	 */
	@Override
	public void close() throws SQLException {
		statement.close();
	}


	/**
	 * Adds the current set of parameters as a batch entry.
	 * @throws SQLException if something went wrong
	 */
	public void addBatch() throws SQLException {
		statement.addBatch();
	}


	/**
	 * Executes all of the batched statements.
	 * 
	 * See {@link Statement#executeBatch()} for details.
	 * @return update counts for each statement
	 * @throws SQLException if something went wrong
	 */
	public int[] executeBatch() throws SQLException {
		return statement.executeBatch();
	}
}